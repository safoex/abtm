common:
  root_child: main
  parameters:
    online: 1

functions:
  cpp:
    helloworld:
      name: helloworld

    hellosber:
      name: hellosber
      remap:
        times: times1

    icub_move:
      name: iCub_move

variables:
  input: ["RUNNING", "SUCCESS", "FAILED", "UNDEFINED", a,b,c,d]
  output_no_send_zero: [yy,zz]
  output: [aa,bb,cc,dd]

set:
  RUNNING: 0
  SUCCESS: 1
  FAILED: 2
  UNDEFINED: 3
  a: 0
  b: 0
  c: 0
  d: 0
  yy: 0
  zz: 0
  aa: 0
  bb : 0
  cc: 0
  dd: 0

templates:
  latch:
    args:
      required: [child]
      optional:
        mem: ~mem
        state: ~state

    var:
      __STATE__$child: [input, UNDEFINED]
      $mem: [input, 0]
      $state: [input, UNDEFINED]

    
    nodes:
      $name:
        type: skipper
        children: [~mask_seq, $child]

      ~mask_seq:
        type: sequence
        children: [~mask_sel, ~mask]

      ~mask_sel:
        type: selector
        children: [~mask_set_state_if, ~mask_set_state_seq]

      ~mask_set_state_if:
        type: condition
        S: $mem == 1
        F: default

      ~mask_set_state_seq:
        type: sequence
        children: [~mask_set_state, ~mask_finish_state_sel]

      ~mask_set_state:
        type: action
        assign:
          $state: __STATE__$child

      ~mask_finish_state_sel:
        type: selector
        children: [~mask_finish_state_if, ~mask_finish_state]

      ~mask_finish_state_if:
        type: condition
        F: $state == SUCCESS || $state == FAILED
        S: default

      ~mask_finish_state:
        type: action
        assign:
          $mem: 1

      ~mask:
        type: condition
        S: $state == SUCCESS
        F: $state == FAILED
        R: default

    children: [$child]

  latch_simple:
    args:
      required: [child]

    var:
      __STATE__$child: [input, UNDEFINED]

    nodes:
      $name:
        type: skipper
        children: [~mask, $child]

      ~mask:
        type: condition
        S: __STATE__$child == SUCCESS
        F: __STATE__$child == FAILED
        R: default

    children: [$child]


  reset:
    args:
      required: [child]

    var:
      __STATE__$child: [input, UNDEFINED]

    nodes:
      $name:
        type: action
        assign:
          __STATE__$child: UNDEFINED

nodes:
  main:
    type: sequence
    children: [E, L, C1, LL, C2]

  E:
    type: condition
    S: z > 0
    R: default
    var:
      z: [input, 0]

  L:
    type: t/latch_simple
    child: T

  T:
    type: sequence
    children: [count, cond]

  count:
    type: action
    assign:
      x: x + 1
    var:
      x: [output, 0]

  cond:
    type: condition
    S: y > 0
    R: default
    var:
      y: [input, 0]

  C1:
    type: condition
    S: v > 1
    R: default
    var:
      v: [input, 0]

  LL:
    type: t/latch_simple
    child: RLS

  RLS:
    type: sequence
    children: [RL, A]

  RL:
    type: t/reset
    child: T

  A:
    type: action
    assign:
      z: 0

  C2:
    type: condition
    S: z > 2
    R: default





